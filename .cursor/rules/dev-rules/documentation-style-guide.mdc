---
description: 
globs: *.md,*.mdx,*.txt
alwaysApply: false
---
# ドキュメンテーション スタイルガイドライン

## AIアシスタントへの特記事項 (最重要)

このスタイルガイドラインは、AIによって生成されるドキュメントの品質を最大限に高め、人間による修正コストをゼロに近づけることを目的としています。以下の点を特に遵守してください。

1. **ルールの厳格な適用**: すべてのルールを文字通り解釈し、厳格に適用してください。曖昧な点や解釈に迷う箇所がある場合、**独自の判断や一般的な慣習に頼らず、必ず最もルールに忠実で安全な方法を選択してください。**
2. **番号付けの絶対禁止**: セクション見出し、リストアイテム、手順説明など、**いかなる箇所においても番号 (例: `1.`, `a.`, `ステップ1`) を使用することは固く禁止します。** これは、AIが自身の処理ステップや思考プロセスを記述する場合にも厳格に適用されます。
3. **リストマーカーの統一**: 箇条書きのマーカーは、階層に関わらず常に `-` (ハイフン の後に半角スペース1つ) を使用してください。他のマーカー (`*`, `+` など) は一切使用しないでください。
4. **空白と改行の厳守**: 指定された空白・改行ルールを正確に守ってください。不必要な空行やインデントの乱れは、手動修正の手間を増大させます。
5. **過去の誤りを繰り返さない**: 以前のインタラクションでスタイルガイドライン違反が指摘された場合、その内容を記憶し、同様の誤りを繰り返さないよう細心の注意を払ってください。特に「実行ステップ」の報告形式での番号付きリストの使用は、過去に指摘された重大な誤りです。

これらの特記事項は、他のすべてのルールに優先して考慮されるべきものです。

## 基本原則

このスタイルガイドは、高品質で保守性の高いドキュメントを作成するための指針です。特に以下の点を重視します。

- 修正コストの最小化: AIによって生成されたドキュメントは、**細部の書式に至るまで人間による手直しが不要であること**を最終目標とします。人間による手直しが最小限で済むように、書式や空白の扱いを厳密に定めます。
- 変更への耐性: 番号付きセクションなど、一部の変更が全体に影響を及ぼす可能性のある記述方法を避け、変更に強い構造を目指します。

## 文体

### 基本
- 丁寧すぎる表現 (「〜しましょう」「〜ですね」など) は避け、「〜します」「〜です」といった直接的で簡潔な表現を使用します。
- 冗長な説明は避け、情報を簡潔に伝えます。
  - 手順の説明など、複数のステップがある場合は後述の「手順の説明」セクションのルールに従います。
  - 同じ内容の繰り返しや、不必要な修飾は避けます。
- 過度に砕けた表現 (「〜ちゃいます」「〜なんか」など) は避け、「〜します」「〜など」のように、読みやすさを保ちつつ標準的な表現を使用します。
- カッコを使うときは全角カッコ「（）」は禁止し、半角のカッコ「()」を使用します。

## セクション構成と書式

### 見出し
- 見出しは `#`、`##`、`###` を適切に使用し、階層構造を明確にします。
- セクションや見出しに番号は**絶対に禁止します。**
  - 理由: 番号を使用すると、後からセクションを追加・削除・順序変更した場合に、すべての番号を手動で修正する必要が生じ、多大なコストがかかるためです。
  - **補足: このルールは、AIが自身の処理ステップを記述する場合にも厳格に適用されます。**

### 空白・改行
- セクション間の不必要な空行は削除します。
- 段落と段落の間には1行の空行を入れます。
- 見出しとその直後の最初の段落の間には1行の空行を入れます。
- 段落がコードブロックを導入する場合 (例: 「以下のコマンドを実行します。」)、その段落と直後のコードブロックの間に空行は禁止します。
	- 理由: 不必要な空行や一貫性のないインデントは、ドキュメントの可読性を損なうだけでなく、手動修正時の手間を大幅に増加させるためです。

**不適切な例 (過度な空行や不適切なリストインデント):**
```markdown
1. Dynamic requireエラー: // リストマーカー後の不必要なスペースとコロン、および番号付きリストの使用

    ``` // 前の行との間に不必要な空行
    Error: Dynamic require of "events" is not supported
    ```

**適切な例 (見出しと段落、コードブロックの間の空白):**
```markdown
### Dynamic requireエラー
Error: Dynamic require of "events" is not supported
```

**詳細な改行の例 (ユーザー指定の修正例に基づく):**
```markdown
### OSのパッケージ管理システム (`dpkg`) の修正

Playwrightのブラウザをインストールする前に、OSのパッケージ管理システムの問題を解決します。

以下のコマンドで `dpkg` の設定を試みます。
```bash
sudo dpkg --configure -a
```
これにより、`vim` と `vim-tiny` の依存関係に関するエラーが明らかになります。
次に、以下のコマンドを実行して、壊れたパッケージの依存関係を修正します。
```bash
sudo apt-get install -f
```
このコマンドにより、不足していた `vim-common` と `vim-runtime` が適切にアップグレードまたはインストールされ、依存関係の問題が解決します。

### リスト
- 箇条書きマーカーは `-` を使用します。
- マーカー `-` の後には半角スペースを1つだけ入れます。**ネストされたリストを含め、全ての階層でこのルールを適用します。**
- 箇条書きは、関連する複数の項目を並列に列挙する場合に使用します。
- **手順を説明する場合 (AIが自身の処理ステップを記述する場合も含む) は、番号付きリスト (例: `1.`, `2.`) や順序を示すマーカーの使用は固く禁止します。** 代わりに後述の「手順の説明」で示される、見出しと箇条書きを組み合わせた形式、または各ステップを独立したH3見出しで区切る形式を使用してください。
- リストアイテムのテキストが複数行にわたる場合を除き、リストアイテム間に空行は禁止します。

**不適切な例 (AIが過去に犯した誤りも含む):**
```markdown
*   コードブロックの直前と直後には、それぞれ1行の空行を入れます。 // アスタリスクマーカーの使用
```
```markdown
1. 最初のステップ: // 番号付きリストの使用
    *   サブステップA // アスタリスクマーカーの使用、およびネストでの誤ったマーカー
```

**適切な例:**
```markdown
- コードブロックの直前と直後には、それぞれ1行の空行を入れます。
```
```markdown
- トップレベルアイテム
  - ネストされたアイテム1 (マーカーは `-`、インデントで階層を示す)
  - ネストされたアイテム2
```

## コードブロック

- コードブロックの直前と直後には、それぞれ1行の空行を入れます。(ただし、コードブロックがドキュメントの末尾の場合は直後の空行は不要です。)
- コードブロックには、適切な言語指定 (例: `js`や`bash`) を常に行います。
- コードブロックが示す内容の説明は、そのコードブロックの直前の段落に記述します。
- コードブロックで使用する「\`」を記載するときにバックスラッシュ「\」の使用は禁止します。左で記載しているのは、あくまで書体によって消えてしまうため明示的に設定しているものです。

## 手順の説明

- 一連の操作手順を説明する場合 (AIが自身の処理ステップやタスクの内訳を記述する場合も含む) は、各ステップをH3レベルの見出し (`### ステップ名`) で明確に区切り、その下に説明や関連する箇条書き (`-` マーカーのみを使用) を配置します。
- **いかなる状況でも、手順を示すために番号付きリスト (例: `1.`, `a.`) やセクション番号を使用してはなりません。**
- 各手順は、具体的かつ明確な指示を含めます。曖昧な表現は避けます。
- 可能な限り、各手順の実行結果や、正しく実行されたことを確認する方法も記述します。
- 関連するエラーメッセージや、トラブルシューティングの情報も必要に応じて含めます。

---
例 (ユーザーが実行する手順):

### 設定ファイルの更新

まず、設定ファイルを開きます。
```bash
vi /path/to/config.conf
```

次に、`enabled` パラメータを `true` に変更します。
- 変更前: `enabled = false`
- 変更後: `enabled = true`

### サービスの再起動

最後に、サービスを再起動して変更を適用します。
```bash
sudo systemctl restart your-service
```

再起動後、`systemctl status your-service` でエラーが出ていないことを確認します。
---

例 (AIが自身の処理ステップを記述する場合):

### 要件の分析
- 提供された技術スタックを確認します。
- 開発コンテナに必要なツールをリストアップします。

### 設定ファイルの作成
- ベースイメージを選択します。
- 必要なフィーチャーを追加します。
- ポートフォワーディングや `postCreateCommand` を設定します。